generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  name          String
  password      String
  avatar        String?
  banner        String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  filterContent Boolean   @default(false)

  threads         Thread[]    @relation("UserThreads")
  replies       Reply[]   @relation("UserReplies")
  likes         Like[]    @relation("UserLikes")
  followings    Follow[]  @relation("UserFollowing")
  followers     Follow[]  @relation("UserFollowers")

  @@map("users")
}

model Thread {
  id            Int       @id @default(autoincrement())
  content       String
  image         String?
  badLabels     String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  author        User      @relation(fields: [authorId], references: [id], name: "UserThreads",  onDelete: Cascade)
  authorId      Int

  replies       Reply[]   @relation("ThreadReplies")
  likes         Like[]    @relation("ThreadLikes")

  @@map("threads")
}

model Reply {
  id          Int       @id @default(autoincrement())
  image       String?
  content     String
  badLabels   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  repliedBy   User      @relation(fields: [authorId], references: [id], name: "UserReplies", onDelete: Cascade)
  authorId    Int
  repliedTo   Thread      @relation(fields: [targetId], references: [id], name: "ThreadReplies", onDelete: Cascade)
  targetId    Int

  @@map("replies")
}

model Like {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  likedBy     User      @relation(fields: [authorId], references: [id], name: "UserLikes", onDelete: Cascade)
  authorId    Int
  likedOn     Thread      @relation(fields: [targetId], references: [id], name: "ThreadLikes", onDelete: Cascade)
  targetId    Int

  @@map("likes")
}

model Follow {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  following     User      @relation(fields: [targetId], references: [id], name: "UserFollowers", onDelete: Cascade)
  targetId      Int
  followOwner   User      @relation(fields: [ownerId], references: [id], name: "UserFollowing", onDelete: Cascade)
  ownerId       Int

  @@map("follows")
}